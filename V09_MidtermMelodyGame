/*
 * Midterm Game: It's A Match!
 * Lee Saynor
 * DIGF 2B03 Physical Computing
 * OCAD University
 * Created on Feb 9, 2014
 *
 * V03 - Switches between melodies A and B
 * V04 - 2 controllers with internal pull-up resistors, proper melody: 3 parts so far
 * V05 - More melody sections, commented out LED nonsense; will restore later
 * V06 - Condensed numerous arrays into melodies[] and durations[] 2D arrays, removed "if" statements mess in loop, add debugging 
 * V07 - Added Westminster Chimes, restored 4 controllers & LEDs, different pins, LED heartbeat effect
 * V08 - Alien transmission test
 * V09 - Player turns
 *
 * Based on:
 * "9.4 Generating Audio Tones and Fading an LED," Arduino Cookbook by Michael Margolis
 * "Play Melody" Tutorial by D. Cuartielles
 * "5.2 Using a Switch Without External Resistors," Arduino Cookbook
 * ...
 */
 
#include "pitches.h"
 
byte speakerPin = 2;
byte ledPins[] = {5, 6, 9, 10};      // LED array

byte buttonPins[] = {7, 8, 12, 13};  // Momentary switch array

byte vote[] = {0, 0, 0, 0};          // If player has clicked
byte life[] = {1, 1, 1, 1};          // Life status for each player

// ALIEN TRANSMISSION ARRAYS (4 PLAYERS):
int alienNote[] =       {NOTE_D6, NOTE_AS2, NOTE_C5, NOTE_E1};
int alienRandomMin[] =  {100,     100,      50,      100};
int alienRandomMax[] =  {600,     300,      200,     700};
int alienDur[] =        {20,      37,       45,      90};

const int MELO_MAX = 100;     // Total beats: Define a constant for number of elements
int truRandom[MELO_MAX];
int gameRound = 0;            // What round is it?
const int TOTAL_ROUNDS = 10;  // How many rounds are there total?

int phase = 0;              // 0 is original transmission, 1 is follow-up, 2 is vote, 3 is healthcheck and elimination
int section = 0;

int brightness = 0;
int increment = 1;

// Elephants Get Big Dirty Feet    FACE

//          [R][C]  Westminster Quarters
int westminsterMelo[5][9] =
  {{NOTE_E4,  NOTE_GS4, NOTE_FS4, NOTE_B3,  0,        0,        0,        0,        0},        // 0) Full hour (2)
   {NOTE_E4,  NOTE_FS4, NOTE_GS4, NOTE_E4,  0,        0,        0,        0,        0},        // 1) Full hour (3)
   {NOTE_GS4, NOTE_E4,  NOTE_FS4, NOTE_B3,  0,        0,        0,        0,        0},        // 2) Full hour (4)
   {NOTE_B3,  NOTE_FS4, NOTE_GS4, NOTE_E4,  0,        0,        0,        0,        0},        // 3) Full hour (5)
   {NOTE_DS3, 0,        0,        0,        0,        0,        0,        0,        0}};       // 4) Big Ben E3

int westminsterDur[5][9] =
  {{250,      250,      250,      500,      0,        0,        0,        0,        0},        // 0) Full hour (2)
   {250,      250,      250,      500,      0,        0,        0,        0,        0},        // 1) Full hour (3)
   {250,      250,      250,      500,      0,        0,        0,        0,        0},        // 2) Full hour (4)
   {250,      250,      250,      500,      0,        0,        0,        0,        0},        // 3) Full hour (5)
   {1200,     0,        0,        0,        0,        0,        0,        0,        0}};       // 4) Big Ben E3


void setup() {
  Serial.begin(9600);
  pinMode(speakerPin, OUTPUT);
  for (int b = 0; b < 4; b++) {  //<------------ Why was this < 2?
    pinMode(buttonPins[b], INPUT);
    digitalWrite(buttonPins[b], HIGH);  // Turn on internal pull-ups on the buttonPins
  }
  // pins driven by analogWrite do not need to be declared as outputs
  
  // Print random numbers with a different seed value each time
  randomSeed(analogRead(0)); // read from an analog port with nothing connected
  Serial.println();
  Serial.println("Print 100 random numbers between 0 and 2 after floating seed ");
  for(int i = 0; i < MELO_MAX; i++) {
    truRandom[i] = random(3);      // Writing the 100 random states (9 rounds) to an array once each game setup
    Serial.print(truRandom[i]);
    Serial.print(" ");
  }
  Serial.println();
  Serial.println();
  
  //BOOT CHIME
  for (int part = 0; part < 5; part++) {    // Less than melody array Rows
    for (int m = 0; m < 9; m++) {            // Less than melody array Columns
      playFrequency(westminsterMelo[part][m], westminsterDur[part][m]/3);
    }
  }
}


void playFrequency(int frequency, int duration) {
  // Period is one cycle of tone
  // Period is equal to 1 divided by frequency
  // Duration is how long the pulsing sound should last in milliseconds
  int period = 1000000L / frequency;
  int pulse = period / 2;
  for (long i = 0; i < duration * 1000L; i += period) {
    digitalWrite(speakerPin, HIGH);
    delayMicroseconds(pulse);
    digitalWrite(speakerPin, LOW);
    delayMicroseconds(pulse);
  }
}

void heartbeatLED() {    // All LEDs first attempt at "heartbeat" effect
  for (int brightness = 0; brightness < 255; brightness++) {
    for (int p = 0; p < 4; p++) {
      analogWrite(ledPins[p], brightness);
    }
    delay(2);
  }
  for (int brightness = 255; brightness >= 0; brightness--) {
    for (int p = 0; p < 4; p++) {
      analogWrite(ledPins[p], brightness);
    }
    delay(2);
  }
  for (int brightness = 0; brightness < 70; brightness++) {
    for (int p = 0; p < 4; p++) {
      analogWrite(ledPins[p], brightness);
    }
    delay(2);
  }
  for (int brightness = 70; brightness >= 0; brightness--) {
    for (int p = 0; p < 4; p++) {
      analogWrite(ledPins[p], brightness);
    }
    delay(2);
  }
}

void hbLED(int u) {    // Individual LED heartbeat to test controllers
  for (int brightness = 0; brightness < 255; brightness++) {
    analogWrite(ledPins[u], brightness);
    delay(2);
  }
  for (int brightness = 255; brightness >= 0; brightness--) {
    analogWrite(ledPins[u], brightness);
    delay(2);
  }
  for (int brightness = 0; brightness < 70; brightness++) {
    analogWrite(ledPins[u], brightness);
    delay(2);
  }
  for (int brightness = 70; brightness >= 0; brightness--) {
    analogWrite(ledPins[u], brightness);
    delay(2);
  }
}

void offLED(int w) {    // Individual LED off to test controllers
  analogWrite(ledPins[w], 0);
  delay(2);
}
  
  
void loop() {
  for (gameRound = 0; gameRound < TOTAL_ROUNDS; gameRound++) {
    Serial.print("ROUND: ");
    Serial.print(gameRound);
    Serial.println();
    if (phase == 0) {    // Original transmission
      Serial.print("PHASE: 0");
      Serial.println();
      for (int h = 0; h < 4 + gameRound; h++) {
        //analogWrite(ledPins[b], 255);
        playFrequency(NOTE_B3, truRandom[h]*200);
        delay(50);
      }
      delay(1000);
      phase++;
    } else if (phase == 1) {   // Follow-up transmission
      Serial.print("PHASE: 1");
      Serial.println();
      for (int r = 0; r < 3; r++) {      // Heartbeat x3
        heartbeatLED();
      }
      phase++;
    } else if (phase == 2) {   // Players vote on veracity
      Serial.print("PHASE: 2");
      Serial.println();
      for (int b = 0; b < 4; b++) {
        int val = digitalRead(buttonPins[b]);    // Read input values
        if (val == LOW) {  // Flip player's vote
          vote[b] = 1;
          playFrequency(alienNote[b] + random(alienRandomMin[b], alienRandomMax[b]), alienDur[b]); //<------Read from alien arrays
          Serial.print("PLAYER ");
          Serial.print(b);
          Serial.print(" VOTED.");
          Serial.println();
        }
      }
    } else if (phase == 3) {  // Healthcheck and elimination
      Serial.print("PHASE: 3");
      Serial.println();
      for (int r = 0; r < 3; r++) {      // Heartbeat x3
        heartbeatLED();
        // check if transmissions matched, check whether each player voted or not
        // judgement & elimination
      }
    }
  }
}  

  
  
  /*for (int b = 0; b < 4; b++) {  //<-------------------------------------------------Added into switch above
    int val = digitalRead(buttonPins[b]);    // Read input values
    if (val == LOW) {  // Light and tone at same time
      analogWrite(ledPins[b], 255);
      //playFrequency(NOTE_C5 + random(50,200), 45); //<-------------Lost in space without food
      playFrequency(alienNote[b] + random(alienRandomMin[b], alienRandomMax[b]), alienDur[b]); //<------Read from alien arrays
    } else {
      analogWrite(ledPins[b], 0);
    }
  }*/

  
  /*if ((val[0] == LOW) || (val[1] == LOW) || (val[2] == LOW) || (val[3] == LOW)) { // <---------------Controller 3 no work
    if (section == 0) {
      for (int part = 0; part < 5; part++) {    // Less than melody array Rows
        //Serial.print("Section ");
        //Serial.print(part);
        //Serial.print(" note frequencies: ");
        for (int m = 0; m < 9; m++) {            // Less than melody array Columns
          //Serial.print(melodies[part][m]);
          playFrequency(westminsterMelo[part][m], westminsterDur[part][m]*2);
          //Serial.print(", ");
        }
        //Serial.println();
        delay(120);
      }
    }
  } else {
    heartbeatLED();    // LED "breathing" effect
  }*/
  
  
  
  
  
/*************************************************
 * Public Constants
 *************************************************/

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
